package org.jzw.yxbs.service.impl;import java.util.ArrayList;import java.util.List;import javax.annotation.Resource;import org.apache.log4j.Logger;import org.dozer.Mapper;import org.dozer.MappingException;import org.jzw.yxbs.annotation.TrimBlank4String;import org.jzw.yxbs.condition.UserCondition;import org.jzw.yxbs.dao.UserMgrDao;import org.jzw.yxbs.domain.User;import org.jzw.yxbs.exception.UserNameExistException;import org.jzw.yxbs.service.UserService;import org.jzw.yxbs.vo.UserVo;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Service("userService")public class UserServiceImpl implements UserService {	private static final Logger LOGGER = Logger.getLogger(UserServiceImpl.class);		@Resource	public Mapper dozerMapper;		@Resource	private UserMgrDao userMgrDao;	@TrimBlank4String	@Override	public List<UserVo> findUsers(UserCondition userCondition) {		List<UserVo> resultList = new ArrayList<UserVo>();		try {			List<User> result = userMgrDao.findUsers(userCondition);			for (User user : result) {				resultList.add(dozerMapper.map(user, UserVo.class));			}			return resultList;		} catch (MappingException e) {			LOGGER.error("service错误：", e);			throw new RuntimeException("service错误：",e);		}	}	@TrimBlank4String	@Override	public Integer findUsersCount(UserCondition userCondition) {		try {			return userMgrDao.findUsersCount(userCondition);		} catch (Exception e) {			LOGGER.error("service错误：", e);			throw new RuntimeException("service错误：",e);		}	}	@Override	public List<String> getRoleList() {		try {			return userMgrDao.getRoleList();		} catch (Exception e) {			LOGGER.error("service错误：", e);			throw new RuntimeException("service错误：",e);		}	}	@Override	public UserVo findUserById(Long userId) {		try {			User user = userMgrDao.findUserById(userId);			return dozerMapper.map(user, UserVo.class);		} catch (Exception e) {			LOGGER.error("service错误：", e);			throw new RuntimeException("service错误：",e);		}	}	@TrimBlank4String	@Override	@Transactional(rollbackFor = Exception.class)	public void deleteUser(String username) {		try {			userMgrDao.deleteUser(username);			userMgrDao.deleteUserInfo(username);		} catch (Exception e) {			LOGGER.error("service错误：", e);			throw new RuntimeException("service错误：",e);		}	}	@TrimBlank4String	@Override	public void deprecatedUser(String username) {		try {			userMgrDao.deprecatedUser(username);		} catch (Exception e) {			LOGGER.error("service错误：", e);			throw new RuntimeException("service错误：",e);		}	}		@TrimBlank4String	@Override	public void activateUser(String username) {		try {			userMgrDao.activateUser(username);		} catch (Exception e) {			LOGGER.error("service错误：", e);			throw new RuntimeException("service错误：",e);		}	}	@TrimBlank4String	@Override	public void modifyPasswd(User user) {		try {			userMgrDao.modifyPasswd(user);		} catch (Exception e) {			LOGGER.error("service错误：", e);			throw new RuntimeException("service错误：",e);		}	}	@TrimBlank4String	@Override	public void insertNewUser(User user) {		try {			userMgrDao.insertNewUser(user);		} catch (Exception e) {			LOGGER.error("service错误：", e);			throw new RuntimeException("service错误：",e);		}	}	@Override	public void checkUserName(String username) throws UserNameExistException {		Integer count = 0;		try {			count = userMgrDao.getUserCountByName(username);		} catch (Exception e) {			LOGGER.error("service错误：", e);			throw new RuntimeException("service错误：",e);		}		if(count > 0){			throw new UserNameExistException("该用户名字已经存在");		}	}}