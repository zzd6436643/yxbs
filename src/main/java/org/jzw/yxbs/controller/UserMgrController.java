package org.jzw.yxbs.controller;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.Resource;import org.apache.log4j.Logger;import org.jzw.yxbs.condition.UserCondition;import org.jzw.yxbs.domain.User;import org.jzw.yxbs.service.UserService;import org.jzw.yxbs.utils.PaginationUtil;import org.jzw.yxbs.utils.UserInfoUtil;import org.jzw.yxbs.vo.UserVo;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.ModelAndView;@SuppressWarnings("unused")@Controller@RequestMapping("/userMgr")public class UserMgrController {	private static final Logger LOGGER = Logger.getLogger(UserMgrController.class);	@Resource	private UserService userService;	@RequestMapping(value = "main")	public ModelAndView main(UserCondition userCondition) {		ModelMap modelMap = new ModelMap();		Integer totalCount = userService.findUsersCount(userCondition);		List<UserVo> resultList = userService.findUsers(userCondition);		modelMap.addAttribute("resultList", resultList);		modelMap.addAttribute("totalCount", totalCount);		modelMap.addAttribute("currentPage", PaginationUtil.getCurrentPage(userCondition.getPageIndex(), userCondition.getPageSize(), totalCount));		modelMap.addAttribute("totalPage", PaginationUtil.getTotalPage(userCondition.getPageIndex(), userCondition.getPageSize(), totalCount));		return new ModelAndView("userMgr/main", modelMap);	}		@RequestMapping(value = "getRoleList")	@ResponseBody	public List<String> getRoleList() {		return userService.getRoleList();	}		@RequestMapping(value = "deleteUser/{userId}")	@ResponseBody	public Map<String,Object> deleteUser(@PathVariable Long userId){		Map<String,Object> resultMap = new HashMap<String,Object>();		try {			UserVo userVo = userService.findUserById(userId);			userService.deleteUser(userVo.getUsername());			resultMap.put("optFlag", true);			resultMap.put("message", "用户删除成功");		} catch (Exception e) {			resultMap.put("optFlag", false);			resultMap.put("message", "用户删除失败");		}		return resultMap;	}		@RequestMapping(value = "insertNewUser")	@ResponseBody	public Map<String,Object> insertNewUser(String new_username,String new_passwd){		Map<String,Object> resultMap = new HashMap<String,Object>();		try {			User user = new User();			user.setUsername(new_username);			String password = UserInfoUtil.getEncodePasswd(new_passwd, new_username);			user.setPasswd(password);			userService.insertNewUser(user);			resultMap.put("optFlag", true);			resultMap.put("message", "新增用户成功");		} catch (Exception e) {			resultMap.put("optFlag", false);			resultMap.put("message", "新增用户失败");		}		return resultMap;	}	}