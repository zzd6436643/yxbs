package org.jzw.yxbs.aop;import java.lang.annotation.Annotation;import java.lang.reflect.Field;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.springframework.stereotype.Component;@Aspect@Componentpublic class Aspect4Params {	/**	 * 去除方法参数中的空格 带有@TrimBlank4String标记的方法为切入点 	 * 仅可以对String类型的参数或者带有@TrimBlank4Object标记的对象的String属性进行trim操作	 * 可以把传入String对象的空字符串设置为null modify by zhangzhide 2013-08-15 add by	 * zhangzhide 2013-07-18	 */	@Around("@annotation(org.jzw.yxbs.annotation.TrimBlank4String)")	public Object trimBlank4StringByAnno(ProceedingJoinPoint point) throws Throwable {		Object[] args = point.getArgs();		for (int i = 0; i < args.length; i++) {			if (args[i] instanceof java.lang.String) {				args[i] = ((String) args[i]).trim();			} else {				if (args[i] == null) {					continue;				}				Class<?> cl = args[i].getClass();				Annotation[] annos = cl.getAnnotations();				Boolean trimFlag = false;				for (Annotation anno : annos) {					if (anno instanceof org.jzw.yxbs.annotation.TrimBlank4Object) {						trimFlag = true;						break;					}				}				if (trimFlag) {					Field[] fields = cl.getDeclaredFields();					for (Field field : fields) {						field.setAccessible(true);						if (field.get(args[i]) instanceof java.lang.String) {							String tempStr = (String) field.get(args[i]);							if (tempStr.trim().equalsIgnoreCase("")) {								field.set(args[i], null);							} else {								field.set(args[i], tempStr.trim());							}						}					}				}			}		}		Object o = point.proceed(args);		return o;	}}