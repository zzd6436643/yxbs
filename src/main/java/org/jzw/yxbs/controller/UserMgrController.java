package org.jzw.yxbs.controller;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.annotation.Resource;import org.apache.log4j.Logger;import org.jzw.yxbs.condition.UserCondition;import org.jzw.yxbs.domain.User;import org.jzw.yxbs.exception.UserNameExistException;import org.jzw.yxbs.service.UserService;import org.jzw.yxbs.utils.PaginationUtil;import org.jzw.yxbs.utils.UserInfoUtil;import org.jzw.yxbs.vo.UserVo;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.ModelAndView;@SuppressWarnings("unused")@Controller@RequestMapping("/userMgr")public class UserMgrController {	private static final Logger LOGGER = Logger.getLogger(UserMgrController.class);	@Resource	private UserService userService;	@RequestMapping(value = "main")	public ModelAndView main(UserCondition userCondition) {		ModelMap modelMap = new ModelMap();		Integer totalCount = userService.findUsersCount(userCondition);		List<UserVo> resultList = userService.findUsers(userCondition);		modelMap.addAttribute("resultList", resultList);		modelMap.addAttribute("totalCount", totalCount);		modelMap.addAttribute("currentPage", PaginationUtil.getCurrentPage(userCondition.getPageIndex(), userCondition.getPageSize(), totalCount));		modelMap.addAttribute("totalPage", PaginationUtil.getTotalPage(userCondition.getPageIndex(), userCondition.getPageSize(), totalCount));		return new ModelAndView("userMgr/main", modelMap);	}	@RequestMapping(value = "getRoleList")	@ResponseBody	public List<String> getRoleList() {		return userService.getRoleList();	}	@RequestMapping(value = "deleteUser/{userId}")	@ResponseBody	public Map<String, Object> deleteUser(@PathVariable Long userId) {		Map<String, Object> resultMap = new HashMap<String, Object>();		try {			UserVo userVo = userService.findUserById(userId);			if (userVo.getRole().equalsIgnoreCase("ROLE_ROOT")) {				resultMap.put("optFlag", false);				resultMap.put("message", "你不能删除root用户");				return resultMap;			}			userService.deleteUser(userVo.getUsername());			resultMap.put("optFlag", true);			resultMap.put("message", "用户删除成功");		} catch (Exception e) {			resultMap.put("optFlag", false);			resultMap.put("message", "用户删除失败");		}		return resultMap;	}	@RequestMapping(value = "insertNewUser")	@ResponseBody	public Map<String, Object> insertNewUser(String new_username, String new_passwd) {		Map<String, Object> resultMap = new HashMap<String, Object>();		try {			User user = new User();			user.setUsername(new_username);			String password = UserInfoUtil.getEncodePasswd(new_passwd, new_username);			user.setPasswd(password);			userService.checkUserName(new_username);			userService.insertNewUser(user);			resultMap.put("optFlag", true);			resultMap.put("message", "新增用户成功");		} catch (UserNameExistException ue) {			resultMap.put("optFlag", false);			resultMap.put("message", "该用户名已被使用");		} catch (Exception e) {			resultMap.put("optFlag", false);			resultMap.put("message", "新增用户失败");		}		return resultMap;	}	@RequestMapping(value = "modifyPasswd")	@ResponseBody	public Map<String, Object> modifyPasswd(Long modify_userId, String modify_passwd) {		Map<String, Object> resultMap = new HashMap<String, Object>();		try {			UserVo userVo = userService.findUserById(modify_userId);			if (userVo.getRole().equalsIgnoreCase("ROLE_ROOT") && (!userVo.getUsername().equalsIgnoreCase(UserInfoUtil.getUserName()))) {				resultMap.put("optFlag", false);				resultMap.put("message", "不能修改其他ROOT账号的密码");				return resultMap;			}			String password = UserInfoUtil.getEncodePasswd(modify_passwd, userVo.getUsername());			User user = new User();			user.setUsername(userVo.getUsername());			user.setPasswd(password);			userService.modifyPasswd(user);			resultMap.put("optFlag", true);			resultMap.put("message", "密码修改成功");		} catch (Exception e) {			resultMap.put("optFlag", false);			resultMap.put("message", "密码修改失败");		}		return resultMap;	}	@RequestMapping(value = "deprecatedUser")	@ResponseBody	public Map<String, Object> deprecatedUser(String deprecated_user) {		Map<String, Object> resultMap = new HashMap<String, Object>();		try {			UserCondition userCondition = new UserCondition();			userCondition.setUsername(deprecated_user);			List<UserVo> list = userService.findUsers(userCondition);			if (list == null || list.isEmpty()) {				resultMap.put("optFlag", false);				resultMap.put("message", "没有这个用户");			}			UserVo userVo = list.get(0);			if (userVo.getRole().equalsIgnoreCase("ROLE_ROOT")) {				resultMap.put("optFlag", false);				resultMap.put("message", "你不能弃用root用户");				return resultMap;			}			userService.deprecatedUser(deprecated_user);			resultMap.put("optFlag", true);			resultMap.put("message", "弃用用户成功");		} catch (Exception e) {			resultMap.put("optFlag", false);			resultMap.put("message", "弃用用户失败");		}		return resultMap;	}	@RequestMapping(value = "activateUser")	@ResponseBody	public Map<String, Object> activateUser(String activate_user) {		Map<String, Object> resultMap = new HashMap<String, Object>();		try {			UserCondition userCondition = new UserCondition();			userCondition.setUsername(activate_user);			List<UserVo> list = userService.findUsers(userCondition);			if (list == null || list.isEmpty()) {				resultMap.put("optFlag", false);				resultMap.put("message", "没有这个用户");			}			UserVo userVo = list.get(0);			if (userVo.getRole().equalsIgnoreCase("ROLE_ROOT")) {				resultMap.put("optFlag", false);				resultMap.put("message", "你不能激活root用户");				return resultMap;			}			userService.activateUser(activate_user);			resultMap.put("optFlag", true);			resultMap.put("message", "激活用户成功");		} catch (Exception e) {			resultMap.put("optFlag", false);			resultMap.put("message", "激活用户失败");		}		return resultMap;	}}